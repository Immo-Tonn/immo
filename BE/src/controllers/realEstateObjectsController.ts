// –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ immo/BE/src/controllers/realEstateObjectsController.ts

import { Request, Response } from 'express';
import RealEstateObjectsModel from '../models/RealEstateObjectsModel';
import ImagesModel from '../models/ImagesModel';

export const getAllObjects = async (req: Request, res: Response) => {
  try {
    const objects = await RealEstateObjectsModel.find()
      .populate('apartments')
      .populate('commercial_NonResidentialBuildings')
      .populate('landPlots')
      .populate('residentialHouses');
    if (!objects) {
      res.status(404).json({ message: 'Keine Objekte gefunden' });
      return;
    }
    res.status(200).json(objects);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: 'Fehler beim Abrufen der Objekte', error });
  }
};

export const getObjectById = async (req: Request, res: Response) => {
  try {
    const object = await RealEstateObjectsModel.findById(req.params.id)
      .populate('apartments')
      .populate('commercial_NonResidentialBuildings')
      .populate('landPlots')
      .populate('residentialHouses');
    if (!object) {
      res.status(404).json({ message: 'Objekt nicht gefunden' });
      return;
    }
    res.json(object);
  } catch (error) {
    res.status(500).json({ message: 'Fehler beim Abrufen der Objekte', error });
  }
};

export const createObject = async (req: Request, res: Response) => {
  try {
    const newObject = new RealEstateObjectsModel(req.body);
    const saved = await newObject.save();
    res.status(201).json(saved);
  } catch (error) {
    res
      .status(400)
      .json({ message: 'Fehler beim Erstellen des Objekts', error });
  }
};

export const updateObject = async (req: Request, res: Response) => {
  try {
    console.log('üîÑ –ö–û–ù–¢–†–û–õ–õ–ï–†: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞');
    console.log('üìã ID –æ–±—ä–µ–∫—Ç–∞:', req.params.id);
    console.log('üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const currentObject = await RealEstateObjectsModel.findById(req.params.id);
    console.log('üìä –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
      id: currentObject?._id,
      images: currentObject?.images,
      title: currentObject?.title
    });
    
    const updated = await RealEstateObjectsModel.findByIdAndUpdate(
      req.params.id,
      req.body,
      { 
        new: true,
        runValidators: true
      },
    );
    
    if (!updated) {
      console.error('‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      res.status(404).json({ message: 'Objekt nicht gefunden' });
      return;
    }
    
    console.log('üìä –û–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
      id: updated._id,
      images: updated.images,
      title: updated.title
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (req.body.images) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      console.log('üìã –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', req.body.images);
      console.log('üìã –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ:', updated.images);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const saveResult = await updated.save();
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
        id: saveResult._id,
        images: saveResult.images
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
      const verification = await RealEstateObjectsModel.findById(req.params.id).lean();
      console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î:', {
        id: verification?._id,
        images: verification?.images
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const expectedOrder = req.body.images;
      const actualOrder = verification?.images || [];
      
      if (JSON.stringify(expectedOrder) === JSON.stringify(actualOrder)) {
        console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
      } else {
        console.error('‚ùå –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –ë–î!');
        console.error('–û–∂–∏–¥–∞–µ–º—ã–π:', expectedOrder);
        console.error('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π:', actualOrder);
        
        res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
          expected: expectedOrder,
          actual: actualOrder
        });
        return;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.set({
      'Cache-Control': 'no-cache, no-store, must-revalidate',
      'Pragma': 'no-cache',
      'Expires': '0',
      'Last-Modified': new Date().toUTCString()
    });
    
    console.log('‚úÖ –ö–û–ù–¢–†–û–õ–õ–ï–†: –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    res.json(updated);
    
  } catch (error) {
    console.error('‚ùå –ö–û–ù–¢–†–û–õ–õ–ï–†: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', (error as Error).stack);
    res
      .status(400)
      .json({ 
        message: 'Fehler beim Aktualisieren des Objekts', 
        error: (error as Error).message,
        stack: process.env.NODE_ENV === 'development' ? (error as Error).stack : undefined
      });
  }
};

export const deleteObject = async (
  req: Request,
  res: Response,
): Promise<void> => {
  try {
    const deleted = await RealEstateObjectsModel.findByIdAndDelete(
      req.params.id,
    );
    if (!deleted) {
      res.status(404).json({ message: 'Objekt nicht gefunden' });
      return;
    }
    res.json({ message: 'Das Objekt wurde erfolgreich gel√∂scht.' });
  } catch (error) {
    res.status(500).json({ message: 'Fehler beim L√∂schen des Objekts', error });
  }
};

// –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø DEBUG
export const debugObjectState = async (req: Request, res: Response): Promise<void> => {
  try {
    const objectId = req.params.id;
    console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    const object = await RealEstateObjectsModel.findById(objectId).lean();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = await ImagesModel.find({ realEstateObject: objectId }).lean();
    
    const result = {
      timestamp: new Date().toISOString(),
      object: {
        id: object?._id,
        title: object?.title,
        images: object?.images,
        imagesCount: object?.images?.length || 0
      },
      actualImages: images.map(img => ({
        id: img._id,
        url: img.url,
        type: img.type,
        realEstateObject: img.realEstateObject
      })),
      actualImagesCount: images.length,
      orderMatch: object?.images?.length === images.length,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      imageIdsInObject: object?.images || [],
      imageIdsInCollection: images.map(img => img._id?.toString()),
      missingInObject: images
        .map(img => img._id?.toString())
        .filter(id => !object?.images?.map(objId => objId.toString()).includes(id)),
      missingInCollection: (object?.images || [])
        .map(objId => objId.toString())
        .filter(id => !images.map(img => img._id?.toString()).includes(id))
    };
    
    console.log('üìä DEBUG —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    
    res.json(result);
  } catch (error: unknown) {
    console.error('‚ùå DEBUG –æ—à–∏–±–∫–∞:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    res.status(500).json({ error: errorMessage });
  }
};


