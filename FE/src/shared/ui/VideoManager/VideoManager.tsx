import React, { useState, useRef, DragEvent, ChangeEvent } from 'react';
import axiosInstance from '@features/utils/axiosConfig';
import styles from './VideoManager.module.css';

interface Video {
  _id?: string;
  url: string;
  thumbnailUrl?: string;
  title?: string;
  videoId?: string;
}

interface VideoFile extends File {
  title?: string;
}

interface TempVideo {
  tempId: string;
  originalName: string;
  title: string;
  size: number;
  path: string;
  mimetype: string;
}

interface VideoManagerProps {
  realEstateObjectId: string;
  existingVideos?: Video[];
  onVideosChange?: (videos: Video[]) => void;
  isEditMode?: boolean;
  tempVideos?: TempVideo[];
  onTempVideosChange?: (videos: TempVideo[]) => void;
}

const VideoManager: React.FC<VideoManagerProps> = ({
  realEstateObjectId,
  existingVideos = [],
  onVideosChange,
  isEditMode = false,
  tempVideos = [],
  onTempVideosChange,
}) => {
  const [selectedFiles, setSelectedFiles] = useState<VideoFile[]>([]);
  const [existingVideoList, setExistingVideoList] =
    useState<Video[]>(existingVideos);
  const [isDragging, setIsDragging] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');
  const dropZoneRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  React.useEffect(() => {
    console.log('üîç === VideoManager Props Debug ===');
    console.log('  realEstateObjectId:', realEstateObjectId);
    console.log('  realEstateObjectId type:', typeof realEstateObjectId);
    console.log('  isEditMode:', isEditMode);
    console.log('  tempVideos length:', tempVideos.length);
    console.log('  existingVideos length:', existingVideos.length);
    console.log('  onTempVideosChange defined:', typeof onTempVideosChange);
    console.log('================================');
  }, [
    realEstateObjectId,
    isEditMode,
    tempVideos.length,
    existingVideos.length,
  ]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  React.useEffect(() => {
    setExistingVideoList(existingVideos);

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (existingVideos.length > 0) {
      console.log('=== VideoManager Debug ===');
      existingVideos.forEach((video, index) => {
        console.log(`Video ${index + 1}:`, {
          title: video.title,
          originalUrl: video.url,
          thumbnailUrl: video.thumbnailUrl,
          directUrl: getDirectVideoUrl(video.url),
          iframeUrl: getIframeUrl(video.url),
        });
      });
      console.log('========================');
    }
  }, [existingVideos]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    return () => {
      if (realEstateObjectId === 'new-object' && tempVideos.length > 0) {
        const tempIds = tempVideos.map(video => video.tempId);
        axiosInstance
          .post('/videos/cleanup-temp', { tempIds })
          .catch(err => console.warn('Cleanup error on unmount:', err));
      }
    };
  }, [realEstateObjectId, tempVideos]);

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ
  React.useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (
        selectedFiles.length > 0 ||
        (realEstateObjectId === 'new-object' && tempVideos.length > 0)
      ) {
        e.preventDefault();
        return true;
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [selectedFiles, realEstateObjectId, tempVideos]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ thumbnail URL
  const getCorrectThumbnailUrl = (video: Video): string => {
    if (video.thumbnailUrl) {
      const videoId =
        extractVideoId(video.url) || extractVideoId(video.thumbnailUrl);
      if (videoId) {
        return `https://vz-973fa28c-a7d.b-cdn.net/${videoId}/preview.webp?v=${Math.floor(Date.now() / 1000)}`;
      }
    }
    return video.thumbnailUrl || '';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è videoId –∏–∑ URL
  const extractVideoId = (url: string): string | null => {
    const patterns = [
      /\/([a-f0-9\-]+)\/play$/,
      /\/([a-f0-9\-]+)\/thumbnail/,
      /\/([a-f0-9\-]+)\/preview/,
      /play\/\d+\/([a-f0-9\-]+)/,
      /embed\/\d+\/([a-f0-9\-]+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) return match[1];
    }
    return null;
  };

  const getDirectVideoUrl = (originalUrl: string): string => {
    try {
      if (originalUrl.includes('.mp4') || originalUrl.includes('play_')) {
        return originalUrl;
      }

      const playRegex = /iframe\.mediadelivery\.net\/play\/\d+\/([a-f0-9\-]+)/;
      const embedRegex =
        /iframe\.mediadelivery\.net\/embed\/\d+\/([a-f0-9\-]+)/;

      const playMatch = originalUrl.match(playRegex);
      const embedMatch = originalUrl.match(embedRegex);
      const videoId = playMatch?.[1] || embedMatch?.[1];

      if (videoId) {
        return `https://vz-973fa28c-a7d.b-cdn.net/${videoId}/play_480p.mp4`;
      }

      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å videoId –∏–∑ URL:', originalUrl);
      return originalUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏:', error);
      return originalUrl;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è iframe URL –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
  const getIframeUrl = (originalUrl: string): string => {
    try {
      if (originalUrl.includes('iframe.mediadelivery.net/embed/')) {
        return originalUrl;
      }

      const playRegex =
        /iframe\.mediadelivery\.net\/play\/(\d+)\/([a-f0-9\-]+)/;
      const match = originalUrl.match(playRegex);

      if (match) {
        const [, libraryId, videoId] = match;
        return `https://iframe.mediadelivery.net/embed/${libraryId}/${videoId}`;
      }

      const directRegex = /vz-[\w\-]+\.b-cdn\.net\/([a-f0-9\-]+)/;
      const directMatch = originalUrl.match(directRegex);

      if (directMatch) {
        const [, videoId] = directMatch;
        return `https://iframe.mediadelivery.net/embed/430278/${videoId}`;
      }

      return originalUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ iframe URL:', error);
      return originalUrl;
    }
  };

  // 3. checkServerAvailability (–≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞):
  const checkServerAvailability = async (): Promise<boolean> => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
      await axiosInstance.get('/videos', { timeout: 5000 });
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      setError(
        'Server ist nicht verf√ºgbar. Bitte versuchen Sie es sp√§ter erneut.',
      );
      return false;
    }
  };

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
  const uploadTempVideos = async () => {
    console.log('üé• === –ù–ê–ß–ê–õ–û uploadTempVideos ===');
    console.log('üìÅ selectedFiles.length:', selectedFiles.length);

    if (selectedFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    console.log('üé• –ù–ê–ß–ò–ù–ê–ï–ú –í–†–ï–ú–ï–ù–ù–£–Æ –ó–ê–ì–†–£–ó–ö–£ –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    console.log('üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:', selectedFiles.length);
    console.log('üîó realEstateObjectId:', realEstateObjectId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    const totalSize = selectedFiles.reduce((sum, file) => sum + file.size, 0);
    const maxTotalSize = 500 * 1024 * 1024; // 500MB –æ–±—â–∏–π –ª–∏–º–∏—Ç

    if (totalSize > maxTotalSize) {
      console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤');
      setError(
        'Gesamtgr√∂√üe aller Videos √ºberschreitet 500MB. Bitte reduzieren Sie die Anzahl der Dateien.',
      );
      return;
    }

    setUploading(true);
    setError('');
    setUploadProgress(0);

    const newTempVideos: TempVideo[] = [];
    const failedUploads: string[] = [];

    try {
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];

        if (!file) {
          console.warn(`–§–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º ${i} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        try {
          console.log(
            `üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª ${i + 1}/${selectedFiles.length}: ${file.name}`,
          );
          const formData = new FormData();
          formData.append('video', file);
          formData.append('title', file.title || file.name);

          console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /videos/temp');
          console.log('üìã FormData —Å–æ–¥–µ—Ä–∂–∏—Ç:', {
            video: file.name,
            title: file.title || file.name,
          });

          const response = await axiosInstance.post('/videos/temp', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
            timeout: 300000,
            onUploadProgress: progressEvent => {
              const total = progressEvent.total || 1;
              const current = progressEvent.loaded;
              const fileProgress = (current / total) * 100;
              const totalProgress =
                (i / selectedFiles.length) * 100 +
                fileProgress / selectedFiles.length;
              setUploadProgress(Math.round(totalProgress));
            },
          });

          console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
          newTempVideos.push(response.data);
        } catch (fileError: any) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, fileError);
          console.error('‚ùå URL –∑–∞–ø—Ä–æ—Å–∞:', fileError.config?.url);
          console.error('‚ùå –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', fileError.config?.method);
          console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', fileError.response?.data);
          failedUploads.push(file.name);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
      if (onTempVideosChange) {
        console.log(
          'üìã –û–±–Ω–æ–≤–ª—è–µ–º tempVideos, –¥–æ–±–∞–≤–ª—è–µ–º:',
          newTempVideos.length,
        );
        onTempVideosChange([...tempVideos, ...newTempVideos]);
      } else {
        console.log('‚ö†Ô∏è onTempVideosChange –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
      }

      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      setSelectedFiles([]);
      setUploadProgress(0);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (failedUploads.length > 0) {
        setError(
          `${newTempVideos.length} Videos gespeichert, ${failedUploads.length} fehlgeschlagen: ${failedUploads.join(', ')}`,
        );
      } else if (newTempVideos.length > 0) {
        console.log(
          `‚úÖ ${newTempVideos.length} Videos erfolgreich tempor√§r gespeichert`,
        );
      }
    } catch (err: any) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ uploadTempVideos:', err);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏:', err.response?.data);
      setError(
        'Fehler beim tempor√§ren Speichern der Videos: ' +
          (err.response?.data?.error || err.message),
      );
    } finally {
      setUploading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
  const handleDragEnter = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (
      dropZoneRef.current &&
      !dropZoneRef.current.contains(e.relatedTarget as Node)
    ) {
      setIsDragging(false);
    }
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);

    const files = Array.from(e.dataTransfer.files);
    processFiles(files);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      processFiles(files);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  const processFiles = (files: File[]) => {
    const videoFiles = files.filter(
      file =>
        file.type.startsWith('video/') ||
        [
          'video/mp4',
          'video/avi',
          'video/mov',
          'video/wmv',
          'video/flv',
          'video/webm',
        ].includes(file.type),
    );

    if (videoFiles.length === 0) {
      setError(
        'Bitte w√§hlen Sie nur Videodateien aus (mp4, avi, mov, wmv, flv, webm)',
      );
      return;
    }

    const maxSize = 100 * 1024 * 1024; // 100MB
    const oversizedFiles = videoFiles.filter(file => file.size > maxSize);

    if (oversizedFiles.length > 0) {
      setError('Einige Dateien √ºberschreiten die maximale Gr√∂√üe von 100MB');
      return;
    }

    setError('');

    const filesWithTitles: VideoFile[] = videoFiles.map(file => {
      const videoFile = file as VideoFile;
      videoFile.title = file.name.replace(/\.[^/.]+$/, '');
      return videoFile;
    });

    setSelectedFiles(prev => [...prev, ...filesWithTitles]);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
  const updateVideoTitle = (index: number, title: string) => {
    setSelectedFiles(prev =>
      prev.map((file, i) => {
        if (i === index && file) {
          const updatedFile = { ...file };
          updatedFile.title = title;
          return updatedFile;
        }
        return file;
      }),
    );
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  const updateExistingVideoTitle = async (videoId: string, title: string) => {
    try {
      await axiosInstance.put(`/videos/${videoId}`, { title });

      setExistingVideoList(prev =>
        prev.map(video =>
          video._id === videoId ? { ...video, title } : video,
        ),
      );

      if (onVideosChange) {
        const updatedVideos = existingVideoList.map(video =>
          video._id === videoId ? { ...video, title } : video,
        );
        onVideosChange(updatedVideos);
      }
    } catch (err) {
      console.error('Fehler beim Aktualisieren des Videotitels:', err);
      setError('Fehler beim Aktualisieren des Videotitels');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞
  const removeNewVideo = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  const removeExistingVideo = async (videoId: string) => {
    if (
      !window.confirm('Sind Sie sicher, dass Sie dieses Video l√∂schen m√∂chten?')
    ) {
      return;
    }

    try {
      await axiosInstance.delete(`/videos/${videoId}`);

      setExistingVideoList(prev => prev.filter(video => video._id !== videoId));

      if (onVideosChange) {
        const updatedVideos = existingVideoList.filter(
          video => video._id !== videoId,
        );
        onVideosChange(updatedVideos);
      }
    } catch (err) {
      console.error('Fehler beim L√∂schen des Videos:', err);
      setError('Fehler beim L√∂schen des Videos');
    }
  };

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  const removeTempVideo = (tempId: string) => {
    if (
      !window.confirm(
        'Sind Sie sicher, dass Sie dieses tempor√§re Video entfernen m√∂chten?',
      )
    ) {
      return;
    }

    if (onTempVideosChange) {
      const updatedTempVideos = tempVideos.filter(
        video => video.tempId !== tempId,
      );
      onTempVideosChange(updatedTempVideos);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      axiosInstance
        .post('/videos/cleanup-temp', { tempIds: [tempId] })
        .then(() => {
          console.log('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        })
        .catch(err => {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
          setError(
            'Warnung: Tempor√§re Datei konnte nicht vom Server gel√∂scht werden',
          );
          setTimeout(() => setError(''), 5000);
        });
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const uploadVideos = async () => {
    console.log('üöÄ === –ù–ê–ß–ê–õ–û uploadVideos ===');
    console.log('üìÅ selectedFiles.length:', selectedFiles.length);
    console.log('üîó realEstateObjectId:', realEstateObjectId);
    console.log(
      'üîç realEstateObjectId === "new-object":',
      realEstateObjectId === 'new-object',
    );
    console.log('üìù isEditMode:', isEditMode);

    if (selectedFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    const serverAvailable = await checkServerAvailability();
    if (!serverAvailable) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
    if (realEstateObjectId === 'new-object') {
      console.log('üéØ –£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û: realEstateObjectId === "new-object"');
      console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º uploadTempVideos...');
      await uploadTempVideos();
      console.log('‚úÖ uploadTempVideos –∑–∞–≤–µ—Ä—à–µ–Ω');
      return;
    } else {
      console.log(
        'üéØ –£–°–õ–û–í–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û: realEstateObjectId –ù–ï –†–ê–í–ï–ù "new-object"',
      );
      console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π...');
    }

    // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    console.log('üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
    setUploading(true);
    setError('');
    setUploadProgress(0);

    try {
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];

        if (!file) {
          console.warn(`–§–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º ${i} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        console.log(
          `üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª ${i + 1}/${selectedFiles.length} —á–µ—Ä–µ–∑ –û–ë–´–ß–ù–´–ô —Ä–æ—É—Ç /videos`,
        );

        const formData = new FormData();
        formData.append('video', file);
        formData.append('realEstateObjectId', realEstateObjectId);
        formData.append('title', file.title || file.name);

        await axiosInstance.post('/videos', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
          timeout: 300000,
          onUploadProgress: progressEvent => {
            const total = progressEvent.total || 1;
            const current = progressEvent.loaded;
            const fileProgress = (current / total) * 100;
            const totalProgress =
              (i / selectedFiles.length) * 100 +
              fileProgress / selectedFiles.length;
            setUploadProgress(Math.round(totalProgress));
          },
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∏–¥–µ–æ
      const response = await axiosInstance.get(
        `/videos/by-object?objectId=${realEstateObjectId}`,
      );
      const newVideos = response.data || [];
      setExistingVideoList(newVideos);

      if (onVideosChange) {
        onVideosChange(newVideos);
      }

      setSelectedFiles([]);
      setUploadProgress(0);
    } catch (err: any) {
      console.error('Fehler beim Hochladen der Videos:', err);
      setError(
        'Fehler beim Hochladen der Videos: ' +
          (err.response?.data?.error || err.message),
      );
    } finally {
      setUploading(false);
    }
  };

  // –ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleZoneClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className={styles.videoSection}>
      <h3 className={styles.sectionTitle}>Videos</h3>

      {error && <div className={styles.errorMessage}>{error}</div>}

      {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ */}
      {realEstateObjectId === 'new-object' && tempVideos.length > 0 && (
        <>
          <h4 className={styles.imageSection}>
            Videos f√ºr Upload nach Erstellung
          </h4>
          <div className={styles.videoPreviews}>
            {tempVideos.map(video => (
              <div
                key={`temp-${video.tempId}`}
                className={`${styles.videoPreviewItem} ${styles.tempVideo}`}
              >
                <div className={styles.tempVideoLabel}>Wartend</div>
                <div className={styles.videoTitle}>
                  <input
                    type="text"
                    value={video.title}
                    onChange={e => {
                      if (onTempVideosChange) {
                        const updatedTempVideos = tempVideos.map(v =>
                          v.tempId === video.tempId
                            ? { ...v, title: e.target.value }
                            : v,
                        );
                        onTempVideosChange(updatedTempVideos);
                      }
                    }}
                    className={styles.videoTitleInput}
                    placeholder="Titel des Videos"
                  />
                </div>
                <div className={styles.videoFileName}>
                  üìÅ {video.originalName}
                </div>
                <div className={styles.videoFileName}>
                  üìä {(video.size / (1024 * 1024)).toFixed(1)} MB
                </div>
                <button
                  type="button"
                  className={styles.removeVideoBtn}
                  onClick={() => removeTempVideo(video.tempId)}
                  title="Video entfernen"
                >
                  ‚úï
                </button>
              </div>
            ))}
          </div>
        </>
      )}

      {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ */}
      {isEditMode && existingVideoList.length > 0 && (
        <>
          <h4 className={styles.imageSection}>Aktuelle Videos</h4>
          <div className={styles.videoPreviews}>
            {existingVideoList.map(video => (
              <div
                key={`existing-${video._id || Math.random()}`}
                className={`${styles.videoPreviewItem} ${styles.existingVideo}`}
              >
                <div className={styles.existingVideoLabel}>Vorhanden</div>
                <div className={styles.videoTitle}>
                  <input
                    type="text"
                    value={video.title || ''}
                    onChange={e => {
                      if (video._id) {
                        updateExistingVideoTitle(video._id, e.target.value);
                      }
                    }}
                    className={styles.videoTitleInput}
                    placeholder="Titel des Videos"
                  />
                </div>

                <div className={styles.videoControls}>
                  <button
                    type="button"
                    onClick={() =>
                      window.open(getIframeUrl(video.url), '_blank')
                    }
                    className={styles.openVideoBtn}
                    title="Video im Browser testen"
                  >
                    üé• Iframe √∂ffnen
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      const url = getIframeUrl(video.url);
                      navigator.clipboard.writeText(url);
                      alert('Video URL wurde in die Zwischenablage kopiert');
                    }}
                    className={styles.openVideoBtn}
                    title="Video URL kopieren"
                  >
                    üìã URL kopieren
                  </button>
                </div>

                <div className={styles.videoPreview}>
                  {video.thumbnailUrl ? (
                    <img
                      src={getCorrectThumbnailUrl(video)}
                      alt={video.title || 'Video preview'}
                      className={styles.videoThumbnail}
                      onError={e => {
                        console.warn(
                          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ thumbnail:',
                          getCorrectThumbnailUrl(video),
                        );
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                        const parent = target.parentElement;
                        if (parent) {
                          const placeholder =
                            parent.querySelector('.video-placeholder');
                          if (placeholder) {
                            (placeholder as HTMLElement).style.display = 'flex';
                          }
                        }
                      }}
                    />
                  ) : null}

                  <div
                    className={`${styles.videoPlaceholder} video-placeholder`}
                    style={{ display: video.thumbnailUrl ? 'none' : 'flex' }}
                  >
                    <span>üé•</span>
                    <p>{video.title || 'Video'}</p>
                  </div>
                </div>

                <button
                  type="button"
                  className={styles.removeVideoBtn}
                  onClick={() => video._id && removeExistingVideo(video._id)}
                  title="Video l√∂schen"
                >
                  ‚úï
                </button>
              </div>
            ))}
          </div>
        </>
      )}

      {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div
        ref={dropZoneRef}
        className={`${styles.dropZone} ${isDragging ? styles.dragging : ''}`}
        onDragEnter={handleDragEnter}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={handleZoneClick}
      >
        <div className={styles.dropZoneContent}>
          <span className={styles.dropZoneIcon}>üé•</span>
          <p>
            {isEditMode
              ? 'Neue Videos hier ablegen oder Dateien ausw√§hlen'
              : 'Videos hier ablegen oder Dateien ausw√§hlen'}
          </p>
          <input
            ref={fileInputRef}
            type="file"
            accept="video/*"
            multiple
            onChange={handleFileChange}
            className={styles.fileInput}
          />
          <p className={styles.dropZoneHint}>
            Unterst√ºtzte Formate: MP4, AVI, MOV, WMV, FLV, WebM (max 100MB pro
            Datei)
          </p>
        </div>
      </div>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ */}
      {selectedFiles.length > 0 && (
        <>
          <h4 className={styles.imageSection}>
            {isEditMode ? 'Neue Videos' : 'Ausgew√§hlte Videos'}
          </h4>
          <div className={styles.videoPreviews}>
            {selectedFiles.map((file, index) => {
              if (!file) return null;

              return (
                <div
                  key={`new-${index}`}
                  className={`${styles.videoPreviewItem} ${styles.newVideo}`}
                >
                  <div className={styles.newVideoLabel}>Neu</div>
                  <div className={styles.videoTitle}>
                    <input
                      type="text"
                      value={file.title || ''}
                      onChange={e => updateVideoTitle(index, e.target.value)}
                      className={styles.videoTitleInput}
                      placeholder="Titel des Videos"
                    />
                  </div>
                  <div className={styles.videoFileName}>üìÅ {file.name}</div>
                  <div className={styles.videoFileName}>
                    üìä {(file.size / (1024 * 1024)).toFixed(1)} MB
                  </div>
                  <button
                    type="button"
                    className={styles.removeVideoBtn}
                    onClick={() => removeNewVideo(index)}
                    title="Video entfernen"
                  >
                    ‚úï
                  </button>
                </div>
              );
            })}
          </div>
        </>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {uploading && uploadProgress > 0 && (
        <div className={styles.uploadProgress}>
          <div
            className={styles.progressBar}
            style={{ width: `${uploadProgress}%` }}
          />
          <span className={styles.progressPercentage}>
            {uploadProgress}% - Videos werden hochgeladen...
          </span>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {selectedFiles.length > 0 && !uploading && (
        <div style={{ textAlign: 'center', marginTop: '20px' }}>
          <button
            type="button"
            onClick={uploadVideos}
            className={styles.uploadButton}
          >
            {selectedFiles.length} Video{selectedFiles.length > 1 ? 's' : ''}{' '}
            {realEstateObjectId === 'new-object'
              ? 'tempor√§r speichern'
              : 'hochladen'}
          </button>

          {realEstateObjectId === 'new-object' && (
            <div className={styles.infoMessage} style={{ marginTop: '10px' }}>
              Videos werden nach dem Erstellen des Objekts automatisch
              hochgeladen.
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default VideoManager;
