// immo/FE/src/features/utils/realEstateService.ts

import axios from '@features/utils/axiosConfig';
import { IRealEstateObject, ObjectType } from './types';
import { uploadMultipleImages } from './imageService';
import { log } from 'console';

// Create a main object property
export const createRealEstateObject = async (
  objectData: IRealEstateObject,
): Promise<string> => {
  try {
    const response = await axios.post('/objects', objectData);
    return response.data._id;
  } catch (error) {
    console.error('Fehler beim Erstellen des Immobilienobjekts:', error);
    throw error;
  }
};

// Function to clear URLs from timestamps
const cleanUrl = (url: string): string => {
  const parts = url.split('?t=');
  return parts[0] || url;
};

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateImageOrder —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
// –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateImageOrder —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π:

export const updateImageOrder = async (
  objectId: string,
  orderedImageUrls: string[],
): Promise<void> => {
  console.log('üîÑ –ù–ê–ß–ê–õ–û updateImageOrder');
  console.log('üìã objectId:', objectId);
  console.log('üìã orderedImageUrls:', orderedImageUrls);

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
  if (!orderedImageUrls || orderedImageUrls.length === 0) {
    console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º updateImageOrder');
    return;
  }
  
  try {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ URL
    const cleanUrl = (url: string): string => {
      try {
        const parts = url.split('?');
        return parts[0] || url;
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ URL:', url);
        return url;
      }
    };
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞...');
    const imagesResponse = await axios.get(
      `/images/by-object?objectId=${objectId}&_t=${Date.now()}`,
      {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache'
        }
      }
    );
    
    console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è):', imagesResponse.data);
    
    if (!imagesResponse.data || 
      !Array.isArray(imagesResponse.data) || 
      imagesResponse.data.length === 0) {
    console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ —Ñ–æ—Ç–æ');
      // console.warn('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return;
    }
    
    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î
    interface ImageFromDB {
      _id?: string;
      id?: string;
      url: string;
      type: string;
      realEstateObject: string;
    }
    
    const allImages: ImageFromDB[] = imagesResponse.data;
    console.log('üìä –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', allImages.map(img => ({
      id: img._id || img.id,
      url: img.url,
      type: img.type
    })));
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ ID –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ ID –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ...');
    const orderedImageIds: string[] = [];
    
    orderedImageUrls.forEach((url, index) => {
      if (!url) {
        console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π URL –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${index}`);
        return;
      }
      
      const cleanedUrl = cleanUrl(url);
      console.log(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è URL ${index + 1}:`, cleanedUrl);
      
      const imageObj = allImages.find(img => {
        if (!img?.url) {
          return false;
        }
        
        const imgCleanUrl = cleanUrl(img.url);
        const match = imgCleanUrl === cleanedUrl || 
                     imgCleanUrl.includes(cleanedUrl) || 
                     cleanedUrl.includes(imgCleanUrl);
        
        console.log(`   –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ${imgCleanUrl}: ${match}`);
        return match;
      });
      
      if (imageObj) {
        const imageId = imageObj._id || imageObj.id;
        if (imageId) {
          orderedImageIds.push(imageId);
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageId} –¥–ª—è URL: ${cleanedUrl}`);
        } else {
          console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ ID –¥–ª—è URL: ${cleanedUrl}`);
        }
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è URL: ${cleanedUrl}`);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
    allImages.forEach(img => {
      const imageId = img._id || img.id;
      if (imageId && !orderedImageIds.includes(imageId)) {
        orderedImageIds.push(imageId);
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageId}`);
      }
    });
    
    console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', orderedImageIds);
    
    if (orderedImageIds.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
      return;
      // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      // throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å URL —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ë–î');
    }
    
    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    const mainImageId = orderedImageIds[0];
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞ "additional"
    for (const img of allImages) {
      const imgId = img._id || img.id;
      if (imgId && img.type === 'main' && imgId !== mainImageId) {
        console.log(`üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imgId} —Å main –Ω–∞ additional`);
        try {
          await axios.put(`/images/${imgId}`, { type: 'additional' });
          console.log(`‚úÖ –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imgId} —Å–±—Ä–æ—à–µ–Ω`);
        } catch (imgError: unknown) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imgId}:`, imgError);
        }
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log(`üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${mainImageId}`);
    try {
      await axios.put(`/images/${mainImageId}`, { type: 'main' });
      console.log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${mainImageId}`);
    } catch (imgError: unknown) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, imgError);
      throw imgError;
    }
    
    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', { images: orderedImageIds });
    
    const updateResponse = await axios.put(`/objects/${objectId}`, {
      images: orderedImageIds,
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞):', updateResponse.data);
    console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ –æ–±—ä–µ–∫—Ç–µ:', updateResponse.data.images);
    
    // 5. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const verificationResponse = await axios.get(`/objects/${objectId}?_t=${Date.now()}`);
    console.log('üìä –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –≤ –ë–î:', verificationResponse.data.images);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
    const actualOrder: string[] = verificationResponse.data.images || [];
    const isOrderCorrect = JSON.stringify(orderedImageIds) === JSON.stringify(actualOrder);
    
    if (isOrderCorrect) {
      console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
    } else {
      console.error('‚ùå –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ù–ï –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ –ë–î!');
      console.error('–û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:', orderedImageIds);
      console.error('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫:', actualOrder);
      throw new Error('–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateImageOrder:', error);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ unknown error
    if (error instanceof Error) {
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    
    // Type guard –¥–ª—è axios error
    if (error && typeof error === 'object' && 'response' in error) {
      const axiosError = error as {
        response?: {
          data?: any;
          status?: number;
          statusText?: string;
        };
      };
      console.error('‚ùå HTTP —Å—Ç–∞—Ç—É—Å:', axiosError.response?.status);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', axiosError.response?.data);
    }
    
    throw error;
  }
  
  console.log('‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï updateImageOrder');
};

///////////////////////////////////////////////////////////////

// //Function to update the order of images
// // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// export const updateImageOrder = async (
//   objectId: string,
//   orderedImageUrls: string[],
// ): Promise<void> => {
//   try {
//     console.log('–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
//     console.log('–ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ URL:', orderedImageUrls);
    
//     // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∫–µ—à–∞
//     const imagesResponse = await axios.get(
//       `/images/by-object?objectId=${objectId}&_t=${Date.now()}`,
//       {
//         headers: {
//           'Cache-Control': 'no-cache',
//           'Pragma': 'no-cache'
//         }
//       }
//     );
    
//     if (!imagesResponse.data || !Array.isArray(imagesResponse.data)) {
//       console.warn('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
//       return;
//     }
    
//     const allImages = imagesResponse.data;
//     console.log('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', allImages);
    
//     // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
//     const orderedImageIds: string[] = [];

//     // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
//     orderedImageUrls.forEach(url => {
//       const cleanedUrl = cleanUrl(url);
//       const imageObj = allImages.find(img => cleanUrl(img.url) === cleanedUrl);
//       if (imageObj) {
//         orderedImageIds.push(imageObj._id || imageObj.id);
//       }
//     });
    
//     // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ orderedImageUrls)
//     allImages.forEach(img => {
//       const imageId = img._id || img.id;
//       if (!orderedImageIds.includes(imageId)) {
//         orderedImageIds.push(imageId);
//       }
//     });
    
//     console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', orderedImageIds);
    
//     // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//     if (orderedImageIds.length > 0) {
//       const mainImageId = orderedImageIds[0];
      
//       // 1. –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ "additional"
//       for (const img of allImages) {
//         if (img.type === 'main') {
//           try {
//             await axios.put(`/images/${img._id || img.id}`, {
//               type: 'additional',
//             });
//             console.log('–°–±—Ä–æ—à–µ–Ω —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', img._id || img.id);
//           } catch (error) {
//             console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
//           }
//         }
//       }
      
//       // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
//       try {
//         await axios.put(`/images/${mainImageId}`, {
//           type: 'main',
//         });
//         console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', mainImageId);
//       } catch (error) {
//         console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
//         throw error; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
//       }
      
//       // 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
//       await axios.put(`/objects/${objectId}`, {
//         images: orderedImageIds,
//       });
      
//       console.log('–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ');
      
//       // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
//       const verificationResponse = await axios.get(`/objects/${objectId}`);
//       console.log('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ –ë–î:', verificationResponse.data.images);
//     }
    
//     console.log('–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
//     throw error;
//   }
// };

/////////////////////////////////////////////////////////////////////////////////

// export const updateImageOrder = async (
//   objectId: string,
//   orderedImageUrls: string[],
// ): Promise<void> => {
//   try {
//     console.log('Bildreihenfolge f√ºr Immobilie aktualisieren:', objectId);
//     console.log('Neue URL-Reihenfolge:', orderedImageUrls);

//     // Get all images of an object
//     const imagesResponse = await axios.get(
//       `/images/by-object?objectId=${objectId}`,
//     );
//     if (!imagesResponse.data || !Array.isArray(imagesResponse.data)) {
//       console.warn('Keine Bilder gefunden');
//       return;
//     }
//     const allImages = imagesResponse.data;
//     console.log('Alle Bilder gefunden:', allImages);

//     // Create an array of image IDs in the correct order
//     const orderedImageIds: string[] = [];

//     // First add existing images in the correct order
//     orderedImageUrls.forEach(url => {
//       const cleanedUrl = cleanUrl(url);
//       const imageObj = allImages.find(img => cleanUrl(img.url) === cleanedUrl);
//       if (imageObj) {
//         orderedImageIds.push(imageObj._id || imageObj.id);
//       }
//     });

//     // Then add new images (that are not in orderedImageUrls)
//     allImages.forEach(img => {
//       const imageId = img._id || img.id;
//       if (!orderedImageIds.includes(imageId)) {
//         orderedImageIds.push(imageId);
//       }
//     });

//     console.log('Endg√ºltige Bild-ID-Reihenfolge:', orderedImageIds);

//     //Update the type of the first image to "main"
//     if (orderedImageIds.length > 0) {
//       const mainImageId = orderedImageIds[0];

//       // First reset all images to "additional"
//       for (const img of allImages) {
//         if (img.type === 'main') {
//           try {
//             await axios.put(`/images/${img._id || img.id}`, {
//               type: 'additional',
//             });
//           } catch (error) {
//             console.warn('Fehler beim Zur√ºcksetzen des Bildtyps:', error);
//           }
//         }
//       }

//       // Set the first image as the main
//       try {
//         await axios.put(`/images/${mainImageId}`, {
//           type: 'main',
//         });
//         console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', mainImageId);
//       } catch (error) {
//         console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
//       }
//     }

//     // Update the main property object with the new order of images
//     await axios.put(`/objects/${objectId}`, {
//       images: orderedImageIds,
//     });

//     console.log('–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
//     throw error;
//   }
// };

// Create specific data depending on the property type
export const createSpecificObjectData = async (
  realEstateObjectId: string,
  objectType: ObjectType,
  specificData: Record<string, any>,
): Promise<void> => {
  try {
    const data = {
      ...specificData,
      realEstateObject: realEstateObjectId,
    };

    // Select an endpoint depending on the property type
    let endpoint = '';
    switch (objectType) {
      case ObjectType.APARTMENT:
        endpoint = '/apartments';
        break;
      case ObjectType.HOUSE:
        endpoint = '/residentialHouses';
        break;
      case ObjectType.LAND:
        endpoint = '/landPlots';
        break;
      case ObjectType.COMMERCIAL:
        endpoint = '/commercial_NonResidentialBuildings';
        break;
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞');
    }

    await axios.post(endpoint, data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞:', error);
    throw error;
  }
};

// Full process of creating a property with image uploads
export const createCompleteRealEstateObject = async (
  objectData: IRealEstateObject,
  specificData: Record<string, any>,
  files: File[],
  onUploadProgress?: (progress: number) => void,
): Promise<string> => {
  try {
    // 1. Create the main property object
    console.log('–®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞');
    const realEstateObjectId = await createRealEstateObject(objectData);
    console.log('–®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, ID:', realEstateObjectId);

    // 2. Create specific data depending on the type
    console.log('–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    await createSpecificObjectData(
      realEstateObjectId,
      objectData.type,
      specificData,
    );
    console.log('–®–∞–≥ 2: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');

    // 3. Load images if any
    console.log(
      '–®–∞–≥ 3: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:',
      files.length,
    );
    if (files.length > 0) {
      await uploadMultipleImages(files, realEstateObjectId, onUploadProgress);
    }
    console.log('–®–∞–≥ 3: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    // Return the ID of the created property
    return realEstateObjectId;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
    console.error(
      '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:',
      error.response?.data || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    );
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('–°—Ç–∞—Ç—É—Å:', error.response?.status);
    throw error;
  }
};

// Loading object data for editing
export const fetchObjectForEdit = async (
  objectId: string,
): Promise<{
  objectData: any;
  specificData: any;
  images: string[];
  videos: any[];
}> => {
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', objectId);

    // Getting basic object data
    const objectResponse = await axios.get(`/objects/${objectId}`);
    const objectData = objectResponse.data;
    console.log('–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', objectData);

    // Getting images
    let images: string[] = [];
    try {
      const imagesResponse = await axios.get(
        `/images/by-object?objectId=${objectId}`,
      );
      if (imagesResponse.data && Array.isArray(imagesResponse.data)) {
        images = imagesResponse.data.map((img: any) => img.url);
      }
      console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', images);
    } catch (imageError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
    }

    // Getting video
    let videos: any[] = [];
    try {
      const videosResponse = await axios.get(
        `/videos/by-object?objectId=${objectId}`,
      );
      if (videosResponse.data && Array.isArray(videosResponse.data)) {
        videos = videosResponse.data;
      }
      console.log('–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', videos);
    } catch (videoError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ:', videoError);
    }

    // Getting specific data depending on the object type
    let specificData = null;
    try {
      // Checking if specific data is already populated
      switch (objectData.type) {
        case ObjectType.APARTMENT:
          if (objectData.apartments) {
            if (
              typeof objectData.apartments === 'object' &&
              objectData.apartments._id
            ) {
              specificData = objectData.apartments;
            } else if (typeof objectData.apartments === 'string') {
              const specificResponse = await axios.get(
                `/apartments/${objectData.apartments}`,
              );
              specificData = specificResponse.data;
            }
          }
          break;
        case ObjectType.HOUSE:
          if (objectData.residentialHouses) {
            if (
              typeof objectData.residentialHouses === 'object' &&
              objectData.residentialHouses._id
            ) {
              specificData = objectData.residentialHouses;
            } else if (typeof objectData.residentialHouses === 'string') {
              const specificResponse = await axios.get(
                `/residentialHouses/${objectData.residentialHouses}`,
              );
              specificData = specificResponse.data;
            }
          }
          break;
        case ObjectType.LAND:
          if (objectData.landPlots) {
            if (
              typeof objectData.landPlots === 'object' &&
              objectData.landPlots._id
            ) {
              specificData = objectData.landPlots;
            } else if (typeof objectData.landPlots === 'string') {
              const specificResponse = await axios.get(
                `/landPlots/${objectData.landPlots}`,
              );
              specificData = specificResponse.data;
            }
          }
          break;
        case ObjectType.COMMERCIAL:
          if (objectData.commercial_NonResidentialBuildings) {
            if (
              typeof objectData.commercial_NonResidentialBuildings ===
                'object' &&
              objectData.commercial_NonResidentialBuildings._id
            ) {
              specificData = objectData.commercial_NonResidentialBuildings;
            } else if (
              typeof objectData.commercial_NonResidentialBuildings === 'string'
            ) {
              const specificResponse = await axios.get(
                `/commercial_NonResidentialBuildings/${objectData.commercial_NonResidentialBuildings}`,
              );
              specificData = specificResponse.data;
            }
          }
          break;
      }
      console.log('–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', specificData);
    } catch (specificError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:', specificError);
    }

    return {
      objectData,
      specificData,
      images,
      videos,
    };
  } catch (error) {
    console.error(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
      error,
    );
    throw error;
  }
};

// Function to delete an image from the server by ID
export const deleteImageFromServer = async (imageId: string): Promise<void> => {
  try {
    await axios.delete(`/images/${imageId}`);
    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ ID:', imageId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    throw error;
  }
};

// Function to update specific data depending on the object type
const updateSpecificObjectData = async (
  realEstateObjectId: string,
  objectType: ObjectType,
  specificData: Record<string, any>,
): Promise<void> => {
  try {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞:', objectType);

    // Get the current property to get the ID of the specific data
    const objectResponse = await axios.get(`/objects/${realEstateObjectId}`);
    const objectData = objectResponse.data;
    let specificId: string | null = null;
    let endpoint = '';

    // Determine the ID of the specific data and the endpoint depending on the object type
    switch (objectType) {
      case ObjectType.APARTMENT:
        if (
          typeof objectData.apartments === 'object' &&
          objectData.apartments._id
        ) {
          specificId = objectData.apartments._id;
        } else if (typeof objectData.apartments === 'string') {
          specificId = objectData.apartments;
        }
        endpoint = '/apartments';
        break;
      case ObjectType.HOUSE:
        if (
          typeof objectData.residentialHouses === 'object' &&
          objectData.residentialHouses._id
        ) {
          specificId = objectData.residentialHouses._id;
        } else if (typeof objectData.residentialHouses === 'string') {
          specificId = objectData.residentialHouses;
        }
        endpoint = '/residentialHouses';
        break;
      case ObjectType.LAND:
        if (
          typeof objectData.landPlots === 'object' &&
          objectData.landPlots._id
        ) {
          specificId = objectData.landPlots._id;
        } else if (typeof objectData.landPlots === 'string') {
          specificId = objectData.landPlots;
        }
        endpoint = '/landPlots';
        break;
      case ObjectType.COMMERCIAL:
        if (
          typeof objectData.commercial_NonResidentialBuildings === 'object' &&
          objectData.commercial_NonResidentialBuildings._id
        ) {
          specificId = objectData.commercial_NonResidentialBuildings._id;
        } else if (
          typeof objectData.commercial_NonResidentialBuildings === 'string'
        ) {
          specificId = objectData.commercial_NonResidentialBuildings;
        }
        endpoint = '/commercial_NonResidentialBuildings';
        break;
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞');
    }

    console.log('ID —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', specificId, '–≠–Ω–¥–ø–æ–∏–Ω—Ç:', endpoint);

    if (specificId) {
      //Update existing specific data
      console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
      await axios.put(`${endpoint}/${specificId}`, specificData);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ)
      console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
      const data = {
        ...specificData,
        realEstateObject: realEstateObjectId,
      };
      const response = await axios.post(endpoint, data);

      // Update the main property with a new specific data ID
      const updateData: any = {};
      switch (objectType) {
        case ObjectType.APARTMENT:
          updateData.apartments = response.data._id;
          break;
        case ObjectType.HOUSE:
          updateData.residentialHouses = response.data._id;
          break;
        case ObjectType.LAND:
          updateData.landPlots = response.data._id;
          break;
        case ObjectType.COMMERCIAL:
          updateData.commercial_NonResidentialBuildings = response.data._id;
          break;
      }
      await axios.put(`/objects/${realEstateObjectId}`, updateData);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞:', error);
    throw error;
  }
};

// Function to update a property
export const updateCompleteRealEstateObject = async (
  objectId: string,
  objectData: any,
  specificData: Record<string, any>,
  newFiles: File[],
  existingImages: string[],
  onUploadProgress?: (progress: number) => void,
): Promise<void> => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:', objectId);
    console.log('–ü–æ—Ä—è–¥–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', existingImages);

    // 1. Updating the main property object
    console.log('–®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞');
    await axios.put(`/objects/${objectId}`, objectData);
    console.log('–®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');

    // 2.Updating specific data depending on the type
    console.log('–®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    await updateSpecificObjectData(objectId, objectData.type, specificData);
    console.log('–®–∞–≥ 2: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    // 3. Managing images
    console.log('–®–∞–≥ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
if (existingImages.length === 0 && newFiles.length === 0) {
  console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –Ω–∏ –Ω–æ–≤—ã—Ö)');
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  return;
}

    // 3.1 Getting current images of the property
    let currentImages: any[] = [];
    if (existingImages.length > 0) {
try {
      const imagesResponse = await axios.get(
        `/images/by-object?objectId=${objectId}`,
      );
      if (imagesResponse.data && Array.isArray(imagesResponse.data)) {
        currentImages = imagesResponse.data;
      }
    } catch (error: any) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç
      if (error.response?.status === 400 || 
          error.response?.data?.message?. includes('Keine Bilder')){
          console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ —Ñ–æ—Ç–æ)');
          currentImages = [];
          }else{
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            currentImages = [];
          }     
    }
 }
    

    // 3.2 Finding images to delete (matching by cleaned URLs)
    const existingCleanUrls = existingImages.map(url => cleanUrl(url));
    const imagesToDelete = currentImages.filter(
      img => !existingCleanUrls.includes(cleanUrl(img.url)),
    );

    // 3.3 Removing unnecessary images
    for (const imageToDelete of imagesToDelete) {
      try {
        console.log('–£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID:', imageToDelete._id);
        await deleteImageFromServer(imageToDelete._id);
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', imageToDelete.url);
      } catch (error) {
        console.warn(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
          imageToDelete._id,
          error,
        );
      }
    }

    // 3.4 Uploading new images
    if (newFiles.length > 0) {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', newFiles.length);
      await uploadMultipleImages(newFiles, objectId, onUploadProgress);
      console.log('–ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    // 3.5 Updating the order of images (IMPORTANT!)
    await updateImageOrder(objectId, existingImages);
    console.log('–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω');

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
    console.error(
      '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:',
      error.response?.data || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    );
    throw error;
  }
};
