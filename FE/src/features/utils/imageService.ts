import axios from '@features/utils/axiosConfig';
import { ImageType } from './types';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const uploadImage = async (
  file: File,
  realEstateObjectId: string,
  type: ImageType = ImageType.ADDITIONAL,
  onProgress?: (progress: number) => void,
): Promise<string> => {
  try {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('realEstateObject', realEstateObjectId);
    formData.append('type', type);

    const response = await axios.post('/images', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: progressEvent => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ progressEvent.total –Ω–µ undefined
        const total = progressEvent.total || 100;
        const percentCompleted = Math.round(
          (progressEvent.loaded * 100) / total,
        );

        if (onProgress) {
          onProgress(percentCompleted);
        }
      },
    });

    return response.data.url;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const uploadMultipleImages = async (
  files: File[],
  realEstateObjectId: string,
  onProgress?: (progress: number) => void,
): Promise<string[]> => {
  try {
    const imageUrls: string[] = [];
    let totalProgress = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if (files.length === 0) {
      return [];
    }

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${realEstateObjectId}`);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É –æ–±—ä–µ–∫—Ç–∞
    let hasExistingImages = false;
    try {
      const existingImagesResponse = await axios.get(`/images/by-object?objectId=${realEstateObjectId}`);
      hasExistingImages = existingImagesResponse.data && existingImagesResponse.data.length > 0;
      console.log(`üìä –£ –æ–±—ä–µ–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å ${hasExistingImages ? existingImagesResponse.data.length : 0} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –£ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      hasExistingImages = false;
    }

    for (let i = 0; i < files.length; i++) {
      const file = files[i];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!file) {
        continue;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
      // - –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ò —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –≤ –∑–∞–≥—Ä—É–∑–∫–µ - –¥–µ–ª–∞–µ–º –µ–≥–æ –≥–ª–∞–≤–Ω—ã–º
      // - –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º
      const isMain = !hasExistingImages && i === 0;
      const type = isMain ? ImageType.MAIN : ImageType.ADDITIONAL;

      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/${files.length}, —Ç–∏–ø: ${type}`);

      const url = await uploadImage(
        file,
        realEstateObjectId,
        type,
        progress => {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ —á–∞—Å—Ç—å –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          const fileWeight = 1 / files.length;
          const currentFileProgress = progress * fileWeight;
          const baseProgress = (i / files.length) * 100;

          if (onProgress) {
            onProgress(baseProgress + currentFileProgress);
          }
        },
      );

      imageUrls.push(url);
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${url}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
      totalProgress = ((i + 1) / files.length) * 100;
      if (onProgress) {
        onProgress(totalProgress);
      }
    }

    console.log(`‚úÖ –í—Å–µ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
    return imageUrls;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    throw error;
  }
};    